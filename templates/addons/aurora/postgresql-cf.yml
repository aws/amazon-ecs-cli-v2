Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  # Customize your Aurora Serverless cluster by setting the default value of the following parameters.
  {{logicalIDSafe .Name}}InitialDBName:
    Type: String
    Description: The name of the initial database to be created in the DB cluster.
    Default: {{.InitialDBName}}
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints
  {{logicalIDSafe .Name}}DBAutoPauseSeconds:
    Type: Number
    Description: The duration in seconds before the cluster pauses.
    Default: 1000
Mappings:
  {{logicalIDSafe .Name}}EnvScalingConfigurationMap: {{range $env := .Envs}}
    {{$env}}:
      "DBMinCapacity": 2 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
      "DBMaxCapacity": 8 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
    {{end}}
Resources:
  {{logicalIDSafe .Name}}AuroraKMSCMK:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'
  {{logicalIDSafe .Name}}AuroraKMSCMKAlias:
    Type: 'AWS::KMS::Alias'
    DeletionPolicy: Retain
    DependsOn: ['{{logicalIDSafe .Name}}']
    Properties:
      AliasName: !Sub 'alias/${ {{- logicalIDSafe .Name -}} }'
      TargetKeyId: !Ref {{logicalIDSafe .Name}}AuroraKMSCMK
  {{logicalIDSafe .Name}}DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora cluster.
      SubnetIds:
        !Split [',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' }]
  {{logicalIDSafe .Name}}SecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your workload to access the DB cluster {{logicalIDSafe .Name}}'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'The Security Group for ${Name} to access DB cluster {{logicalIDSafe .Name}}.'
      VpcId:
        Fn::ImportValue:
          !Sub '${App}-${Env}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-${Name}-Aurora'
  {{logicalIDSafe .Name}}DBClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the database cluster.
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: !Sub 'From the Aurora Security Group of the workload ${Name}.'
          SourceSecurityGroupId: !Ref {{logicalIDSafe .Name}}SecurityGroup
      VpcId:
        Fn::ImportValue:
          !Sub '${App}-${Env}-VpcId'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          Description: Allow all outbound traffic by default
          CidrIp: 0.0.0.0/0
  {{logicalIDSafe .Name}}AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/${App}/${Env}/${Name}/{{logicalIDSafe .Name}}/PostgreSQLSecret'
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
  {{- if .ParameterGroup}}
  # {{logicalIDSafe .Name}}DBClusterParameterGroup:
  #   Type: 'AWS::RDS::DBClusterParameterGroup'
  #   Properties:
  #     Description: !Ref 'AWS::StackName'
  #     Family: 'aurora-postgresql10'
  #     Parameters:
  #       client_encoding: 'UTF8'
  {{- else}}
  {{logicalIDSafe .Name}}DBClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'aurora-postgresql10'
      Parameters:
        client_encoding: 'UTF8'
  {{- end}}
  {{logicalIDSafe .Name}}:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername:
        !Join [ "",  [ {{`'{{resolve:secretsmanager:'`}}, !Ref {{logicalIDSafe .Name}}AuroraSecret, ":SecretString:username}}" ]]
      MasterUserPassword:
        !Join [ "",  [ {{`'{{resolve:secretsmanager:'`}}, !Ref {{logicalIDSafe .Name}}AuroraSecret, ":SecretString:password}}" ]]
      DatabaseName: !Ref {{logicalIDSafe .Name}}InitialDBName
      Engine: 'aurora-postgresql'
      EngineVersion: '10.12'
      EngineMode: serverless
      EnableHttpEndpoint: true
      StorageEncrypted: true
      KmsKeyId: !Ref {{logicalIDSafe .Name}}AuroraKMSCMK
      DBClusterParameterGroupName: {{- if .ParameterGroup}} {{.ParameterGroup}} {{- else}} !Ref {{logicalIDSafe .Name}}DBClusterParameterGroup {{- end}}
      DBSubnetGroupName: !Ref {{logicalIDSafe .Name}}DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref {{logicalIDSafe .Name}}DBClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: !FindInMap [{{logicalIDSafe .Name}}EnvScalingConfigurationMap, !Ref Env, DBMinCapacity]
        MaxCapacity: !FindInMap [{{logicalIDSafe .Name}}EnvScalingConfigurationMap, !Ref Env, DBMaxCapacity]
        SecondsUntilAutoPause: !Ref {{logicalIDSafe .Name}}DBAutoPauseSeconds
  {{logicalIDSafe .Name}}SecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref {{logicalIDSafe .Name}}AuroraSecret
      TargetId: !Ref {{logicalIDSafe .Name}}
      TargetType: AWS::RDS::DBCluster
  {{logicalIDSafe .Name}}AccessPolicy:
    Metadata:
      'aws:copilot:description': 'An IAM ManagedPolicy for your workload to access the {{.Name}} db through Data API'
    Type: AWS::IAM::ManagedPolicy
    DependsOn: ['{{logicalIDSafe .Name}}']
    Properties:
      Description: 'Daiya No Esu'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SecretsManagerDBCredentialsAccess
            Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref {{logicalIDSafe .Name}}AuroraSecret
          - Sid: RDSDataServiceAccess
            Action: rds-data:*
            Effect: Allow
            Resource: !Sub
              - 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${ClusterName}'
              - {ClusterName: !Ref {{.logicalSafeID .Name}}}
Outputs:
  {{logicalIDSafe .Name}}AuroraMetadata: # injected as AURORA_METADATA environment variable by Copilot.
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'dbname', 'username', 'password'"
    Value: !Ref {{logicalIDSafe .Name}}AuroraSecret
  {{logicalIDSafe .Name}}SecurityGroup:
    Description: "The security group to attach to the workload."
    Value: !Ref {{logicalIDSafe .Name}}SecurityGroup
  {{logicalIDSafe .Name}}AccessPolicy:
    Description: 'Diamond no ace is so great'
    Value: !Ref {{logicalIDSafe .Name}}AccessPolicy
  {{logicalIDSafe .Name}}DBClusterARN:
    Description: Daiya No Esu
    Value: !Sub
      - 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${ClusterName}'
      - {ClusterName: !Ref {{.logicalSafeID .Name}}}

