---
AWSTemplateFormatVersion: 2010-09-09
Transform:
  - "AWS::Serverless-2016-10-31"
  - "AWS::SecretsManager-2020-07-23"
Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  EnableRotation:
    Type: String
    Description: Whether or not to enable credential rotation with a lambda function.
    Default: true # {{.EnableRotation}}

Conditions:
  CreateLambdaRotation: !Equals
    - !Ref EnableRotation
    - true
Resources:
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateLambdaRotation
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecretsManagerEndpointSecurityGroup
      ServiceName: com.amazonaws.us-west-2.secretsmanager
      SubnetIds: !Split [",", { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" }]
      VpcEndpointType: Interface
      VpcId: 
        Fn::ImportValue: 
          !Sub "${App}-${Env}-VpcId"
  SGIngressToRotationLambdaFromSecretsManager:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateLambdaRotation
    Properties:
      Description: Allows traffic from secrets manager to rotation lambda. 
      GroupId: !Ref RotationSecurityGroup
      SourceSecurityGroupId: !Ref SecretsManagerEndpointSecurityGroup
      IpProtocol: tcp

  SecretsManagerEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateLambdaRotation
    Properties:
      GroupDescription: The Security Group for the VPC Endpoint  
      SecurityGroupIngress:
        - IpProtocol: '-1'
          Description: Allow traffic from Rotation Security Group
          SourceSecurityGroupId: !Ref RotationSecurityGroup
      VpcId: 
        Fn::ImportValue: 
          !Sub "${App}-${Env}-VpcId"
      SecurityGroupEgress:
        - IpProtocol: '-1'
          Description: Allow all outbound traffic by default
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Ref "AWS::StackName"
      SubnetIds:
        !Split [",", { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" }]
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: "from 0.0.0.0/0:5432"
          CidrIp: 0.0.0.0/0
      VpcId: { "Fn::ImportValue": !Sub "${App}-${Env}-VpcId" }
      GroupDescription: RDS security group
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: Allow all outbound traffic by default
          CidrIp: 0.0.0.0/0
  SecurityGroupfromRDSStackdbCredentialsRotationSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub ${AWS::StackName}
      FromPort: 5432
      GroupId: !Ref ClusterSecurityGroup
      SourceSecurityGroupId: !Ref RotationSecurityGroup
      ToPort: 5432
  RotationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: { "Fn::ImportValue": !Sub "${App}-${Env}-VpcId" }
      GroupDescription: !Ref "AWS::StackName"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: Allow all outbound traffic by default
          CidrIp: 0.0.0.0/0
  AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ["/", [!Ref App, !Ref Env, !Ref Name, "aurora-pg"]]
      Description: Aurora PostgreSQL main user secret. 
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16

  SecretRotationTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser
        SemanticVersion: 1.1.60
      Parameters:
        endpoint: !Sub https://secretsmanager.${AWS::Region}.amazonaws.com
        functionName: !Sub ${AWS::StackName}-func
        vpcSecurityGroupIds: !Ref RotationSecurityGroup
        vpcSubnetIds:
          Fn::ImportValue:
            !Sub "${App}-${Env}-PrivateSubnets"

  SecretCredentialPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref AuroraSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Action: "secretsmanager:DeleteSecret"
            Resource: "*"
            Effect: Deny
            Principal:
              AWS: !Join
                - ""
                - - "arn:"
                  - !Ref "AWS::Partition"
                  - ":iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"
  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretAuroraClusterAttachment
    Properties:
      SecretId: !Ref AuroraSecret
      RotationLambdaARN: !GetAtt SecretRotationTemplate.Outputs.RotationLambdaARN
      RotationRules:
        AutomaticallyAfterDays: 30
  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref AuroraSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref AuroraSecret,
            ":SecretString:password}}",
          ],
        ]
      DatabaseName: "tododb"
      Engine: aurora-postgresql
      EngineVersion: "10.7"
      EngineMode: serverless
      EnableHttpEndpoint: true
      StorageEncrypted: true
      DBClusterParameterGroupName: default.aurora-postgresql10
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 8
        SecondsUntilAutoPause: 1000
    DeletionPolicy: Delete
  SecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster
Outputs:
  PostgresData: # injected as POSTGRES_DATA environment variable by Copilot.
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'dbname', 'username', 'password'"
    Value: !Ref AuroraSecret