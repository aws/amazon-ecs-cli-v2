"use strict";const aws=require("aws-sdk");let defaultResponseURL;const updateStackWaiter={delay:30,maxAttempts:29};let report=function(a,b,c,d,e,f){return new Promise((g,h)=>{const i=require("https"),{URL:j}=require("url");var k=JSON.stringify({Status:c,Reason:f,PhysicalResourceId:d||b.logStreamName,StackId:a.StackId,RequestId:a.RequestId,LogicalResourceId:a.LogicalResourceId,Data:e});const l=new j(a.ResponseURL||defaultResponseURL),m={hostname:l.hostname,port:443,path:l.pathname+l.search,method:"PUT",headers:{"Content-Type":"","Content-Length":k.length}};i.request(m).on("error",h).on("response",a=>{a.resume(),400<=a.statusCode?h(new Error(`Error ${a.statusCode}: ${a.statusMessage}`)):g()}).end(k,"utf8")})};const controlEnv=async function(a,b,c,d){for(var e,f=new aws.CloudFormation;;){if(e=await f.describeStacks({StackName:b}).promise(),1!==e.Stacks.length)throw new Error(`Cannot find environment stack ${b}`);var g=e.Stacks[0],h=JSON.parse(JSON.stringify(g.Parameters)),i=!1;for(const b of h)for(const e of d)if(b.ParameterKey===e){const[d,e]=updateParameter(a,c,b.ParameterValue);b.ParameterValue=d,i=i||e}const j=getExportedValues(g);if(!i)return j;try{await f.updateStack({StackName:b,Parameters:h,UsePreviousTemplate:!0,RoleARN:j.CFNExecutionRoleARN,Capabilities:g.Capabilities}).promise()}catch(a){if(!a.message.match(/^Stack.*is in UPDATE_IN_PROGRESS state and can not be updated/))throw a;await f.waitFor("stackUpdateComplete",{StackName:b,$waiter:updateStackWaiter}).promise();continue}if(await f.waitFor("stackUpdateComplete",{StackName:b,$waiter:updateStackWaiter}).promise(),e=await f.describeStacks({StackName:b}).promise(),1!==e.Stacks.length)throw new Error(`Cannot find environment stack ${b}`);return getExportedValues(e.Stacks[0])}};exports.handler=async function(a,b){var c,d={};const e=a.ResourceProperties;try{switch(a.RequestType){case"Create":d=await Promise.race([exports.deadlineExpired(),controlEnv("Create",e.EnvStack,e.Workload,e.Parameters)]),c=`envcontoller/${e.EnvStack}/${e.Workload}`;break;case"Update":d=await Promise.race([exports.deadlineExpired(),controlEnv("Update",e.EnvStack,e.Workload,e.Parameters)]),c=a.PhysicalResourceId;break;case"Delete":d=await Promise.race([exports.deadlineExpired(),controlEnv("Delete",e.EnvStack,e.Workload,e.Parameters)]),c=a.PhysicalResourceId;break;default:throw new Error(`Unsupported request type ${a.RequestType}`);}await report(a,b,"SUCCESS",c,d)}catch(d){console.log(`Caught error ${d}.`),await report(a,b,"FAILED",c,null,d.message)}};const getExportedValues=function(a){const b={};return a.Outputs.forEach(a=>{b[a.OutputKey]=a.OutputValue}),b},updateParameter=function(a,b,c){var d=new Set(c.split(",").filter(function(a){return""!=a}));switch(a){case"Create":d.add(b);break;case"Update":d.add(b);break;case"Delete":d.delete(b);break;default:throw new Error(`Unsupported request type ${a}`);}var e=Array.from(d).join(",");return[e,e!==c]};exports.deadlineExpired=function(){return new Promise(function(a,b){setTimeout(b,870000,new Error("Lambda took longer than 14.5 minutes to update environment"))})},exports.withDefaultResponseURL=function(a){defaultResponseURL=a};