"use strict";const aws=require("aws-sdk"),report=function(a,b,c,d,e,f){return new Promise((g,h)=>{const i=require("https"),{URL:j}=require("url");var k=JSON.stringify({Status:c,Reason:f,PhysicalResourceId:d||b.logStreamName,StackId:a.StackId,RequestId:a.RequestId,LogicalResourceId:a.LogicalResourceId,Data:e});const l=new j(a.ResponseURL||defaultResponseURL),m={hostname:l.hostname,port:443,path:l.pathname+l.search,method:"PUT",headers:{"Content-Type":"","Content-Length":k.length}};i.request(m).on("error",h).on("response",a=>{a.resume(),400<=a.statusCode?h(new Error(`Error ${a.statusCode}: ${a.statusMessage}`)):g()}).end(k,"utf8")})},enableLongArnFormat=async function(){const a=["serviceLongArnFormat","taskLongArnFormat","containerInstanceLongArnFormat"],b=new aws.ECS;for(const c of a)try{await b.putAccountSetting({name:c,value:"enabled"}).promise()}catch(a){throw console.log(`enable ${c}: ${a}.`),a}};exports.handler=async function(a,b){var c;try{switch(a.RequestType){case"Create":await enableLongArnFormat(),c=a.PhysicalResourceId;break;case"Update":case"Delete":c=a.PhysicalResourceId;break;default:throw new Error(`Unsupported request type ${a.RequestType}`);}await report(a,b,"SUCCESS",c,{})}catch(d){console.log(`Caught error ${d}.`),await report(a,b,"FAILED",c,null,d.message)}};