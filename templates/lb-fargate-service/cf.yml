# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# TODO: handle conditional Load Balancer in environment
# TODO: Parameterize TaskDefinition/Service constructs

Parameters:
  EnvironmentName:
    Description: The environment stack to deploy the application stack into.
    Type: String

  Image:
    Description: The Docker image to run.
    Type: String

  TaskCount:
    Type: Number
    Default: 2

Resources:
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}-PublicLoadBalancerSecurityGroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt SecurityGroup.GroupId
      FromPort: 80
      ToPort: 80

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}-PublicLoadBalancerArn
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VpcId

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      # TODO: support sidecar images
        - Essential: true
          # TODO: support images from different repositories
          Image: !Sub ${Image}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: Service
              awslogs-region: !Ref AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: 256
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn

  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17

  LogWritingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !GetAtt LogGroup.Arn
        Version: 2012-10-17
      PolicyName: LogWritingPolicy
      Roles: [ !Ref ExecutionRole ]

  Service:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref TaskDefinition
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}-ClusterId
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Sub ${TaskCount}
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [ !GetAtt SecurityGroup.GroupId ]
          # TODO: find better way to reference subnets
          Subnets:
            Fn::Split:
              - ','
              - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnets
    DependsOn:
      - TargetGroup
      - Listener

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-${EnvironmentName}-SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VpcId

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId: !GetAtt SecurityGroup.GroupId
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}-PublicLoadBalancerSecurityGroupId
      ToPort: 80
