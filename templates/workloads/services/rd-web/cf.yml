# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a load balanced web service on Amazon ECS.
Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
  InstanceCPU:
    Type: String
  InstanceMemory:
    Type: String
  HealthCheckPath:
    Type: String
    Default: ''
  HealthCheckInterval:
    Type: String
    Default: ''
  HealthCheckTimeout:
    Type: String
    Default: ''
  HealthCheckHealthyThreshold:
    Type: String
    Default: ''
  HealthCheckUnhealthyThreshold:
    Type: String
    Default: ''
  AddonsTemplateURL:
    Description: 'URL of the addons nested stack template within the S3 bucket.'
    Type: String
    Default: ''

Conditions:
  HasHealthCheckPath:
    !Not [!Equals [!Ref HealthCheckPath, '']]
  HasHealthCheckInterval:
    !Not [!Equals [!Ref HealthCheckInterval, '']]
  HasHealthCheckTimeout:
    !Not [!Equals [!Ref HealthCheckTimeout, '']]
  HasHealthCheckHealthyThreshold:
    !Not [!Equals [!Ref HealthCheckHealthyThreshold, '']]
  HasHealthCheckUnhealthyThreshold:
    !Not [!Equals [!Ref HealthCheckUnhealthyThreshold, '']]
  HasAddons: # If a bucket URL is specified, that means the template exists.
    !Not [!Equals [!Ref AddonsTemplateURL, '']]

Resources:
{{include "ecraccessrole" . | indent 2}}
{{include "instancerole" . | indent 2}}
  Service:
    Metadata:
      'aws:copilot:description': 'An AppRunner service to run and manage your container image'
    Type: AWS::AppRunner::Service # Resource type will change once we have public resource type
    Properties:
      ServiceName: !Sub '${AppName}-${EnvName}-${WorkloadName}'
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt ECRAccessRole.Arn
        AutoDeploymentsEnabled: false
        ImageRepository:
          ImageIdentifier: !Ref ContainerImage
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: !Ref ContainerPort
            # RuntimeEnvironmentVariables:
            #   COPILOT_APPLICATION_NAME: !Ref AppName
            #   COPILOT_ENVIRONMENT_NAME: !Ref EnvName
            #   COPILOT_SERVICE_NAME: !Ref WorkloadName{{if .Variables}}{{range $name, $value := .Variables}}
            #   {{$name}}: {{$value}}{{end}}{{end}}
      InstanceConfiguration:
        CPU: !Ref InstanceCPU
        Memory: !Ref InstanceMemory
        InstanceRoleArn: !GetAtt InstanceRole.Arn
      HealthCheckConfiguration:
        Path: !If [HasHealthCheckPath, !Ref HealthCheckPath, !Ref AWS::NoValue]
        Interval: !If [HasHealthCheckInterval, !Ref HealthCheckInterval, !Ref AWS::NoValue]
        Timeout: !If [HasHealthCheckTimeout, !Ref HealthCheckTimeout, !Ref AWS::NoValue]
        HealthyThreshold: !If [HasHealthCheckHealthyThreshold, !Ref HealthCheckHealthyThreshold, !Ref AWS::NoValue]
        UnhealthyThreshold: !If [HasHealthCheckUnhealthyThreshold, !Ref HealthCheckUnhealthyThreshold, !Ref AWS::NoValue]
      # {{if .Tags}}
      # Tags:{{range $name, $value := .Tags}}
      #   - Key: {{$name}}
      #   - Value: {{$value}}{{end}}{{end}}

{{include "addons" . | indent 2}}

Outputs:
  ServiceArn:
    Value: !GetAtt Service.ServiceArn
  ServiceURL:
    Value: !GetAtt Service.ServiceUrl
