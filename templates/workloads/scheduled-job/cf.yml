AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation template that represents a scheduled job. 
Parameters: 
  AppName:
    Type: String
  EnvName:
    Type: String
  ServiceName:
    Type: String
  ContainerImage:
    Type: String
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  TaskCount:
    Type: Number
  LogRetention:
    Type: Number
  AddonsTemplateURL:
    Description: 'URL of the addons nested stack template within the S3 bucket.'
    Type: String
    Default: ""
Conditions: 
  HasAddons: # If a bucket URL is specified, that means the template exists.
    !Not [!Equals [!Ref AddonsTemplateURL, ""]]
Resources: 
{{include "loggroup" . | indent 2}}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
{{include "fargate-taskdef-base-properties" . | indent 6}}
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ContainerImage
{{include "envvars" . | indent 10}}
{{include "logconfig" . | indent 10}}
{{include "sidecars" . | indent 8}}

{{include "executionrole" . | indent 2}}

{{include "taskrole" . | indent 2}}

  Rule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: {{.ScheduleExpression}}
      State: ENABLED
      Targets:
      - Arn: !Ref StateMachine
        Id: statemachine
        RoleArn: !GetAtt 'RuleRole.Arn'
  
  RuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 'events.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: EventRulePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'states:StartExecution'
            Resource: !Ref StateMachine

  StateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt 'StateMachineRole.Arn'
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt LogGroup.Arn
        IncludeExecutionData: 'true'
        Level: 'INFO'
      DefinitionSubstitutions:
        Cluster: !Sub arn:${Partition}:ecs:${Region}:${Account}:cluster/${AppName}-${EnvName}-ClusterId
        TaskDefinition: !Ref TaskDefinition.Arn
        Subnets: !Join
          - '","'
          - Fn::ImportValue: !Sub '${AppName}-${EnvName}-PublicSubnets'
        AssignPublicIp: 'ENABLED' # Should be DISABLED if we use private subnets
        SecurityGroups:
          - Fn::ImportValue: !Sub '${AppName}-${EnvName}-EnvironmentSecurityGroup'
        Timeout: {{.Timeout}} # seconds
      DefinitionString: |-
        {
          "Version": "1.0",
          "Comment": "Run AWS Fargate task",
          "TimeoutSeconds": ${Timeout},
          "StartAt": "Run Fargate Task",
          "States": {
            "Run Fargate Task": {
              "Type": "Task",
              "Resource": "arn:aws:states:::ecs:runTask.sync",
              "Parameters": {
                "LaunchType": "FARGATE",
                "PlatformVersion": "LATEST",
                "Cluster": "${Cluster}",
                "TaskDefinition": "${TaskDefinition}",
                "Group.$": "$$.Execution.Name",
                "NetworkConfiguration": {
                  "AwsvpcConfiguration": {
                    "Subnets": ["${Subnets}"],
                    "AssignPublicIp": "${AssignPublicIp}",
                    "SecurityGroups": ["${SecurityGroups}"]
                  }
                },
                "Overrides": {
                  "ContainerOverrides": [
                    {
                      "Name": "fargate-app",
                      "Environment": [
                        {
                          "Name": "IS_STANDALONE_EXECUTION",
                          "Value": "1"
                        }
                      ]
                    }
                  ]
                }
              },{{if .Retry}}
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 3,
                  "BackoffRate": 1.0
                },
                {
                  "ErrorEquals": [
                    "ECS.AmazonECSException"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],{{end}}
              "End": "True"
                }
              ]
            }
          }
        }
      
    
  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'states.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: StateMachine
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource:
            - !GetAtt ExecutionRole.Arn
            - !GetAtt TaskRole.Arn
          - Effect: Allow
            Action: 'ecs:RunTask'
            Resource: !GetAtt 'TaskDefinition.Arn'
            Condition:
              ArnEquals:
                'ecs:cluster': !Sub arn:${Partition}:ecs:${Region}:${Account}:cluster/${AppName}-${EnvName}-ClusterId
          - Effect: Allow
            Action:
            - 'ecs:StopTask'
            - 'ecs:DescribeTasks'
            Resource: '*'
            Condition:
              ArnEquals:
                'ecs:cluster': !Sub arn:${Partition}:ecs:${Region}:${Account}:cluster/${AppName}-${EnvName}-ClusterId
          - Effect: Allow
            Action:
              - 'logs:CreateLogDelivery'
              - 'logs:GetLogDelivery'
              - 'logs:UpdateLogDelivery'
              - 'logs:DeleteLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:PutResourcePolicy'
              - 'logs:DescribeResourcePolicies'
              - 'logs:DescribeLogGroups'
            Resource: '*' # CWL doesn't support resource-level permissions
          - Effect: Allow
            Action:
            - 'events:PutTargets'
            - 'events:PutRule'
            - 'events:DescribeRule'
            Resource: !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule'

{{include "addons" . | indent 2}}
