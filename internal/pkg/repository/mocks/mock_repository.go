// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ecr "github.com/aws/copilot-cli/internal/pkg/aws/ecr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDockerService is a mock of DockerService interface
type MockDockerService struct {
	ctrl     *gomock.Controller
	recorder *MockDockerServiceMockRecorder
}

// MockDockerServiceMockRecorder is the mock recorder for MockDockerService
type MockDockerServiceMockRecorder struct {
	mock *MockDockerService
}

// NewMockDockerService creates a new mock instance
func NewMockDockerService(ctrl *gomock.Controller) *MockDockerService {
	mock := &MockDockerService{ctrl: ctrl}
	mock.recorder = &MockDockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDockerService) EXPECT() *MockDockerServiceMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockDockerService) Build(uri, path, imageTag string, additionalTags ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{uri, path, imageTag}
	for _, a := range additionalTags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockDockerServiceMockRecorder) Build(uri, path, imageTag interface{}, additionalTags ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uri, path, imageTag}, additionalTags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDockerService)(nil).Build), varargs...)
}

// Login mocks base method
func (m *MockDockerService) Login(uri, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", uri, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockDockerServiceMockRecorder) Login(uri, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDockerService)(nil).Login), uri, username, password)
}

// Push mocks base method
func (m *MockDockerService) Push(uri, imageTag string, additionalTags ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{uri, imageTag}
	for _, a := range additionalTags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockDockerServiceMockRecorder) Push(uri, imageTag interface{}, additionalTags ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uri, imageTag}, additionalTags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDockerService)(nil).Push), varargs...)
}

// MockECRRepositoryGetter is a mock of ECRRepositoryGetter interface
type MockECRRepositoryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockECRRepositoryGetterMockRecorder
}

// MockECRRepositoryGetterMockRecorder is the mock recorder for MockECRRepositoryGetter
type MockECRRepositoryGetterMockRecorder struct {
	mock *MockECRRepositoryGetter
}

// NewMockECRRepositoryGetter creates a new mock instance
func NewMockECRRepositoryGetter(ctrl *gomock.Controller) *MockECRRepositoryGetter {
	mock := &MockECRRepositoryGetter{ctrl: ctrl}
	mock.recorder = &MockECRRepositoryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockECRRepositoryGetter) EXPECT() *MockECRRepositoryGetterMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockECRRepositoryGetter) GetRepository(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockECRRepositoryGetterMockRecorder) GetRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockECRRepositoryGetter)(nil).GetRepository), name)
}

// GetECRAuth mocks base method
func (m *MockECRRepositoryGetter) GetECRAuth() (ecr.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetECRAuth")
	ret0, _ := ret[0].(ecr.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetECRAuth indicates an expected call of GetECRAuth
func (mr *MockECRRepositoryGetterMockRecorder) GetECRAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetECRAuth", reflect.TypeOf((*MockECRRepositoryGetter)(nil).GetECRAuth))
}
