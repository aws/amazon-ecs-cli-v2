// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/logs/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudwatchlogs "github.com/aws/copilot-cli/internal/pkg/aws/cloudwatchlogs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocklogWriter is a mock of logWriter interface
type MocklogWriter struct {
	ctrl     *gomock.Controller
	recorder *MocklogWriterMockRecorder
}

// MocklogWriterMockRecorder is the mock recorder for MocklogWriter
type MocklogWriterMockRecorder struct {
	mock *MocklogWriter
}

// NewMocklogWriter creates a new mock instance
func NewMocklogWriter(ctrl *gomock.Controller) *MocklogWriter {
	mock := &MocklogWriter{ctrl: ctrl}
	mock.recorder = &MocklogWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklogWriter) EXPECT() *MocklogWriterMockRecorder {
	return m.recorder
}

// TaskLogEvents mocks base method
func (m *MocklogWriter) TaskLogEvents(logGroupName string, streamLastEventTime map[string]int64, opts ...cloudwatchlogs.GetLogEventsOpts) (*cloudwatchlogs.LogEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{logGroupName, streamLastEventTime}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskLogEvents", varargs...)
	ret0, _ := ret[0].(*cloudwatchlogs.LogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskLogEvents indicates an expected call of TaskLogEvents
func (mr *MocklogWriterMockRecorder) TaskLogEvents(logGroupName, streamLastEventTime interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{logGroupName, streamLastEventTime}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskLogEvents", reflect.TypeOf((*MocklogWriter)(nil).TaskLogEvents), varargs...)
}
