// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/addons/addons.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	workspace "github.com/aws/amazon-ecs-cli-v2/internal/pkg/workspace"
	gomock "github.com/golang/mock/gomock"
)

// MockworkspaceService is a mock of workspaceService interface
type MockworkspaceService struct {
	ctrl     *gomock.Controller
	recorder *MockworkspaceServiceMockRecorder
}

// MockworkspaceServiceMockRecorder is the mock recorder for MockworkspaceService
type MockworkspaceServiceMockRecorder struct {
	mock *MockworkspaceService
}

// NewMockworkspaceService creates a new mock instance
func NewMockworkspaceService(ctrl *gomock.Controller) *MockworkspaceService {
	mock := &MockworkspaceService{ctrl: ctrl}
	mock.recorder = &MockworkspaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockworkspaceService) EXPECT() *MockworkspaceServiceMockRecorder {
	return m.recorder
}

// ReadAddonFiles mocks base method
func (m *MockworkspaceService) ReadAddonFiles(appName string) (*workspace.AddonFiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAddonFiles", appName)
	ret0, _ := ret[0].(*workspace.AddonFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAddonFiles indicates an expected call of ReadAddonFiles
func (mr *MockworkspaceServiceMockRecorder) ReadAddonFiles(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAddonFiles", reflect.TypeOf((*MockworkspaceService)(nil).ReadAddonFiles), appName)
}
