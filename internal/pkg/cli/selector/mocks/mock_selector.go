// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/selector/selector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	config "github.com/aws/copilot-cli/internal/pkg/config"
	prompt "github.com/aws/copilot-cli/internal/pkg/term/prompt"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrompter is a mock of Prompter interface
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// SelectOne mocks base method
func (m *MockPrompter) SelectOne(message, help string, options []string, promptOpts ...prompt.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message, help, options}
	for _, a := range promptOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectOne", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOne indicates an expected call of SelectOne
func (mr *MockPrompterMockRecorder) SelectOne(message, help, options interface{}, promptOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message, help, options}, promptOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOne", reflect.TypeOf((*MockPrompter)(nil).SelectOne), varargs...)
}

// MockappEnvLister is a mock of appEnvLister interface
type MockappEnvLister struct {
	ctrl     *gomock.Controller
	recorder *MockappEnvListerMockRecorder
}

// MockappEnvListerMockRecorder is the mock recorder for MockappEnvLister
type MockappEnvListerMockRecorder struct {
	mock *MockappEnvLister
}

// NewMockappEnvLister creates a new mock instance
func NewMockappEnvLister(ctrl *gomock.Controller) *MockappEnvLister {
	mock := &MockappEnvLister{ctrl: ctrl}
	mock.recorder = &MockappEnvListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappEnvLister) EXPECT() *MockappEnvListerMockRecorder {
	return m.recorder
}

// ListEnvironments mocks base method
func (m *MockappEnvLister) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockappEnvListerMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockappEnvLister)(nil).ListEnvironments), appName)
}

// ListApplications mocks base method
func (m *MockappEnvLister) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockappEnvListerMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockappEnvLister)(nil).ListApplications))
}

// MockconfigSvcLister is a mock of configSvcLister interface
type MockconfigSvcLister struct {
	ctrl     *gomock.Controller
	recorder *MockconfigSvcListerMockRecorder
}

// MockconfigSvcListerMockRecorder is the mock recorder for MockconfigSvcLister
type MockconfigSvcListerMockRecorder struct {
	mock *MockconfigSvcLister
}

// NewMockconfigSvcLister creates a new mock instance
func NewMockconfigSvcLister(ctrl *gomock.Controller) *MockconfigSvcLister {
	mock := &MockconfigSvcLister{ctrl: ctrl}
	mock.recorder = &MockconfigSvcListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockconfigSvcLister) EXPECT() *MockconfigSvcListerMockRecorder {
	return m.recorder
}

// ListServices mocks base method
func (m *MockconfigSvcLister) ListServices(appName string) ([]*config.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", appName)
	ret0, _ := ret[0].([]*config.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockconfigSvcListerMockRecorder) ListServices(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockconfigSvcLister)(nil).ListServices), appName)
}

// MockconfigLister is a mock of configLister interface
type MockconfigLister struct {
	ctrl     *gomock.Controller
	recorder *MockconfigListerMockRecorder
}

// MockconfigListerMockRecorder is the mock recorder for MockconfigLister
type MockconfigListerMockRecorder struct {
	mock *MockconfigLister
}

// NewMockconfigLister creates a new mock instance
func NewMockconfigLister(ctrl *gomock.Controller) *MockconfigLister {
	mock := &MockconfigLister{ctrl: ctrl}
	mock.recorder = &MockconfigListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockconfigLister) EXPECT() *MockconfigListerMockRecorder {
	return m.recorder
}

// ListEnvironments mocks base method
func (m *MockconfigLister) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockconfigListerMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockconfigLister)(nil).ListEnvironments), appName)
}

// ListApplications mocks base method
func (m *MockconfigLister) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockconfigListerMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockconfigLister)(nil).ListApplications))
}

// ListServices mocks base method
func (m *MockconfigLister) ListServices(appName string) ([]*config.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", appName)
	ret0, _ := ret[0].([]*config.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockconfigListerMockRecorder) ListServices(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockconfigLister)(nil).ListServices), appName)
}

// MockwsSvcLister is a mock of wsSvcLister interface
type MockwsSvcLister struct {
	ctrl     *gomock.Controller
	recorder *MockwsSvcListerMockRecorder
}

// MockwsSvcListerMockRecorder is the mock recorder for MockwsSvcLister
type MockwsSvcListerMockRecorder struct {
	mock *MockwsSvcLister
}

// NewMockwsSvcLister creates a new mock instance
func NewMockwsSvcLister(ctrl *gomock.Controller) *MockwsSvcLister {
	mock := &MockwsSvcLister{ctrl: ctrl}
	mock.recorder = &MockwsSvcListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsSvcLister) EXPECT() *MockwsSvcListerMockRecorder {
	return m.recorder
}

// ServiceNames mocks base method
func (m *MockwsSvcLister) ServiceNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNames indicates an expected call of ServiceNames
func (mr *MockwsSvcListerMockRecorder) ServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNames", reflect.TypeOf((*MockwsSvcLister)(nil).ServiceNames))
}

// MockdeployStoreClient is a mock of deployStoreClient interface
type MockdeployStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockdeployStoreClientMockRecorder
}

// MockdeployStoreClientMockRecorder is the mock recorder for MockdeployStoreClient
type MockdeployStoreClientMockRecorder struct {
	mock *MockdeployStoreClient
}

// NewMockdeployStoreClient creates a new mock instance
func NewMockdeployStoreClient(ctrl *gomock.Controller) *MockdeployStoreClient {
	mock := &MockdeployStoreClient{ctrl: ctrl}
	mock.recorder = &MockdeployStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdeployStoreClient) EXPECT() *MockdeployStoreClientMockRecorder {
	return m.recorder
}

// ListDeployedServices mocks base method
func (m *MockdeployStoreClient) ListDeployedServices(appName, envName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployedServices", appName, envName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedServices indicates an expected call of ListDeployedServices
func (mr *MockdeployStoreClientMockRecorder) ListDeployedServices(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedServices", reflect.TypeOf((*MockdeployStoreClient)(nil).ListDeployedServices), appName, envName)
}

// IsDeployed mocks base method
func (m *MockdeployStoreClient) IsDeployed(appName, envName, svcName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeployed", appName, envName, svcName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeployed indicates an expected call of IsDeployed
func (mr *MockdeployStoreClientMockRecorder) IsDeployed(appName, envName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeployed", reflect.TypeOf((*MockdeployStoreClient)(nil).IsDeployed), appName, envName, svcName)
}
