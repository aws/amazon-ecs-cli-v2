// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/selector/selector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	config "github.com/aws/copilot-cli/internal/pkg/config"
	prompt "github.com/aws/copilot-cli/internal/pkg/term/prompt"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrompter is a mock of Prompter interface
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// SelectOne mocks base method
func (m *MockPrompter) SelectOne(message, help string, options []string, promptOpts ...prompt.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message, help, options}
	for _, a := range promptOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectOne", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOne indicates an expected call of SelectOne
func (mr *MockPrompterMockRecorder) SelectOne(message, help, options interface{}, promptOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message, help, options}, promptOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOne", reflect.TypeOf((*MockPrompter)(nil).SelectOne), varargs...)
}

// MockAppEnvLister is a mock of AppEnvLister interface
type MockAppEnvLister struct {
	ctrl     *gomock.Controller
	recorder *MockAppEnvListerMockRecorder
}

// MockAppEnvListerMockRecorder is the mock recorder for MockAppEnvLister
type MockAppEnvListerMockRecorder struct {
	mock *MockAppEnvLister
}

// NewMockAppEnvLister creates a new mock instance
func NewMockAppEnvLister(ctrl *gomock.Controller) *MockAppEnvLister {
	mock := &MockAppEnvLister{ctrl: ctrl}
	mock.recorder = &MockAppEnvListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppEnvLister) EXPECT() *MockAppEnvListerMockRecorder {
	return m.recorder
}

// ListEnvironments mocks base method
func (m *MockAppEnvLister) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockAppEnvListerMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockAppEnvLister)(nil).ListEnvironments), appName)
}

// ListApplications mocks base method
func (m *MockAppEnvLister) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockAppEnvListerMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockAppEnvLister)(nil).ListApplications))
}

// MockConfigSvcLister is a mock of ConfigSvcLister interface
type MockConfigSvcLister struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSvcListerMockRecorder
}

// MockConfigSvcListerMockRecorder is the mock recorder for MockConfigSvcLister
type MockConfigSvcListerMockRecorder struct {
	mock *MockConfigSvcLister
}

// NewMockConfigSvcLister creates a new mock instance
func NewMockConfigSvcLister(ctrl *gomock.Controller) *MockConfigSvcLister {
	mock := &MockConfigSvcLister{ctrl: ctrl}
	mock.recorder = &MockConfigSvcListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigSvcLister) EXPECT() *MockConfigSvcListerMockRecorder {
	return m.recorder
}

// ListServices mocks base method
func (m *MockConfigSvcLister) ListServices(appName string) ([]*config.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", appName)
	ret0, _ := ret[0].([]*config.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockConfigSvcListerMockRecorder) ListServices(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockConfigSvcLister)(nil).ListServices), appName)
}

// MockConfigLister is a mock of ConfigLister interface
type MockConfigLister struct {
	ctrl     *gomock.Controller
	recorder *MockConfigListerMockRecorder
}

// MockConfigListerMockRecorder is the mock recorder for MockConfigLister
type MockConfigListerMockRecorder struct {
	mock *MockConfigLister
}

// NewMockConfigLister creates a new mock instance
func NewMockConfigLister(ctrl *gomock.Controller) *MockConfigLister {
	mock := &MockConfigLister{ctrl: ctrl}
	mock.recorder = &MockConfigListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigLister) EXPECT() *MockConfigListerMockRecorder {
	return m.recorder
}

// ListEnvironments mocks base method
func (m *MockConfigLister) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockConfigListerMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockConfigLister)(nil).ListEnvironments), appName)
}

// ListApplications mocks base method
func (m *MockConfigLister) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockConfigListerMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockConfigLister)(nil).ListApplications))
}

// ListServices mocks base method
func (m *MockConfigLister) ListServices(appName string) ([]*config.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", appName)
	ret0, _ := ret[0].([]*config.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockConfigListerMockRecorder) ListServices(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockConfigLister)(nil).ListServices), appName)
}

// MockWsSvcLister is a mock of WsSvcLister interface
type MockWsSvcLister struct {
	ctrl     *gomock.Controller
	recorder *MockWsSvcListerMockRecorder
}

// MockWsSvcListerMockRecorder is the mock recorder for MockWsSvcLister
type MockWsSvcListerMockRecorder struct {
	mock *MockWsSvcLister
}

// NewMockWsSvcLister creates a new mock instance
func NewMockWsSvcLister(ctrl *gomock.Controller) *MockWsSvcLister {
	mock := &MockWsSvcLister{ctrl: ctrl}
	mock.recorder = &MockWsSvcListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWsSvcLister) EXPECT() *MockWsSvcListerMockRecorder {
	return m.recorder
}

// ServiceNames mocks base method
func (m *MockWsSvcLister) ServiceNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNames indicates an expected call of ServiceNames
func (mr *MockWsSvcListerMockRecorder) ServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNames", reflect.TypeOf((*MockWsSvcLister)(nil).ServiceNames))
}

// MockDeployStoreClient is a mock of DeployStoreClient interface
type MockDeployStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeployStoreClientMockRecorder
}

// MockDeployStoreClientMockRecorder is the mock recorder for MockDeployStoreClient
type MockDeployStoreClientMockRecorder struct {
	mock *MockDeployStoreClient
}

// NewMockDeployStoreClient creates a new mock instance
func NewMockDeployStoreClient(ctrl *gomock.Controller) *MockDeployStoreClient {
	mock := &MockDeployStoreClient{ctrl: ctrl}
	mock.recorder = &MockDeployStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployStoreClient) EXPECT() *MockDeployStoreClientMockRecorder {
	return m.recorder
}

// ListDeployedServices mocks base method
func (m *MockDeployStoreClient) ListDeployedServices(appName, envName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployedServices", appName, envName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedServices indicates an expected call of ListDeployedServices
func (mr *MockDeployStoreClientMockRecorder) ListDeployedServices(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedServices", reflect.TypeOf((*MockDeployStoreClient)(nil).ListDeployedServices), appName, envName)
}

// IsServiceDeployed mocks base method
func (m *MockDeployStoreClient) IsServiceDeployed(appName, envName, svcName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceDeployed", appName, envName, svcName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceDeployed indicates an expected call of IsServiceDeployed
func (mr *MockDeployStoreClientMockRecorder) IsServiceDeployed(appName, envName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceDeployed", reflect.TypeOf((*MockDeployStoreClient)(nil).IsServiceDeployed), appName, envName, svcName)
}
