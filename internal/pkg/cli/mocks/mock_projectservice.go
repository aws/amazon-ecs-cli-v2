// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/app_deploy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	archer "github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer"
	ecr "github.com/aws/amazon-ecs-cli-v2/internal/pkg/build/ecr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockprojectService is a mock of projectService interface
type MockprojectService struct {
	ctrl     *gomock.Controller
	recorder *MockprojectServiceMockRecorder
}

// MockprojectServiceMockRecorder is the mock recorder for MockprojectService
type MockprojectServiceMockRecorder struct {
	mock *MockprojectService
}

// NewMockprojectService creates a new mock instance
func NewMockprojectService(ctrl *gomock.Controller) *MockprojectService {
	mock := &MockprojectService{ctrl: ctrl}
	mock.recorder = &MockprojectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprojectService) EXPECT() *MockprojectServiceMockRecorder {
	return m.recorder
}

// ListProjects mocks base method
func (m *MockprojectService) ListProjects() ([]*archer.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects")
	ret0, _ := ret[0].([]*archer.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockprojectServiceMockRecorder) ListProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockprojectService)(nil).ListProjects))
}

// GetProject mocks base method
func (m *MockprojectService) GetProject(projectName string) (*archer.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", projectName)
	ret0, _ := ret[0].(*archer.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockprojectServiceMockRecorder) GetProject(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockprojectService)(nil).GetProject), projectName)
}

// CreateProject mocks base method
func (m *MockprojectService) CreateProject(project *archer.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockprojectServiceMockRecorder) CreateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockprojectService)(nil).CreateProject), project)
}

// ListEnvironments mocks base method
func (m *MockprojectService) ListEnvironments(projectName string) ([]*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", projectName)
	ret0, _ := ret[0].([]*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockprojectServiceMockRecorder) ListEnvironments(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockprojectService)(nil).ListEnvironments), projectName)
}

// GetEnvironment mocks base method
func (m *MockprojectService) GetEnvironment(projectName, environmentName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockprojectServiceMockRecorder) GetEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockprojectService)(nil).GetEnvironment), projectName, environmentName)
}

// CreateEnvironment mocks base method
func (m *MockprojectService) CreateEnvironment(env *archer.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockprojectServiceMockRecorder) CreateEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockprojectService)(nil).CreateEnvironment), env)
}

// ListApplications mocks base method
func (m *MockprojectService) ListApplications(projectName string) ([]*archer.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", projectName)
	ret0, _ := ret[0].([]*archer.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockprojectServiceMockRecorder) ListApplications(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockprojectService)(nil).ListApplications), projectName)
}

// GetApplication mocks base method
func (m *MockprojectService) GetApplication(projectName, applicationName string) (*archer.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", projectName, applicationName)
	ret0, _ := ret[0].(*archer.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockprojectServiceMockRecorder) GetApplication(projectName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockprojectService)(nil).GetApplication), projectName, applicationName)
}

// CreateApplication mocks base method
func (m *MockprojectService) CreateApplication(app *archer.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockprojectServiceMockRecorder) CreateApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockprojectService)(nil).CreateApplication), app)
}

// MockecrService is a mock of ecrService interface
type MockecrService struct {
	ctrl     *gomock.Controller
	recorder *MockecrServiceMockRecorder
}

// MockecrServiceMockRecorder is the mock recorder for MockecrService
type MockecrServiceMockRecorder struct {
	mock *MockecrService
}

// NewMockecrService creates a new mock instance
func NewMockecrService(ctrl *gomock.Controller) *MockecrService {
	mock := &MockecrService{ctrl: ctrl}
	mock.recorder = &MockecrServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockecrService) EXPECT() *MockecrServiceMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockecrService) GetRepository(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockecrServiceMockRecorder) GetRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockecrService)(nil).GetRepository), name)
}

// GetECRAuth mocks base method
func (m *MockecrService) GetECRAuth() (ecr.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetECRAuth")
	ret0, _ := ret[0].(ecr.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetECRAuth indicates an expected call of GetECRAuth
func (mr *MockecrServiceMockRecorder) GetECRAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetECRAuth", reflect.TypeOf((*MockecrService)(nil).GetECRAuth))
}

// MockdockerService is a mock of dockerService interface
type MockdockerService struct {
	ctrl     *gomock.Controller
	recorder *MockdockerServiceMockRecorder
}

// MockdockerServiceMockRecorder is the mock recorder for MockdockerService
type MockdockerServiceMockRecorder struct {
	mock *MockdockerService
}

// NewMockdockerService creates a new mock instance
func NewMockdockerService(ctrl *gomock.Controller) *MockdockerService {
	mock := &MockdockerService{ctrl: ctrl}
	mock.recorder = &MockdockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdockerService) EXPECT() *MockdockerServiceMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockdockerService) Build(uri, tag, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", uri, tag, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockdockerServiceMockRecorder) Build(uri, tag, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockdockerService)(nil).Build), uri, tag, path)
}

// Login mocks base method
func (m *MockdockerService) Login(uri string, auth ecr.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", uri, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockdockerServiceMockRecorder) Login(uri, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockdockerService)(nil).Login), uri, auth)
}

// Push mocks base method
func (m *MockdockerService) Push(uri, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", uri, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockdockerServiceMockRecorder) Push(uri, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockdockerService)(nil).Push), uri, tag)
}
