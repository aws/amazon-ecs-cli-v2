// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/deploy/cloudformation/stack/lb_web_app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	template "github.com/aws/amazon-ecs-cli-v2/internal/pkg/template"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockloadBalancedWebAppReadParser is a mock of loadBalancedWebAppReadParser interface
type MockloadBalancedWebAppReadParser struct {
	ctrl     *gomock.Controller
	recorder *MockloadBalancedWebAppReadParserMockRecorder
}

// MockloadBalancedWebAppReadParserMockRecorder is the mock recorder for MockloadBalancedWebAppReadParser
type MockloadBalancedWebAppReadParserMockRecorder struct {
	mock *MockloadBalancedWebAppReadParser
}

// NewMockloadBalancedWebAppReadParser creates a new mock instance
func NewMockloadBalancedWebAppReadParser(ctrl *gomock.Controller) *MockloadBalancedWebAppReadParser {
	mock := &MockloadBalancedWebAppReadParser{ctrl: ctrl}
	mock.recorder = &MockloadBalancedWebAppReadParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockloadBalancedWebAppReadParser) EXPECT() *MockloadBalancedWebAppReadParserMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockloadBalancedWebAppReadParser) Read(path string) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockloadBalancedWebAppReadParserMockRecorder) Read(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockloadBalancedWebAppReadParser)(nil).Read), path)
}

// Parse mocks base method
func (m *MockloadBalancedWebAppReadParser) Parse(path string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockloadBalancedWebAppReadParserMockRecorder) Parse(path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockloadBalancedWebAppReadParser)(nil).Parse), varargs...)
}

// ParseLoadBalancedWebService mocks base method
func (m *MockloadBalancedWebAppReadParser) ParseLoadBalancedWebService(arg0 template.ServiceOpts) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseLoadBalancedWebService", arg0)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseLoadBalancedWebService indicates an expected call of ParseLoadBalancedWebService
func (mr *MockloadBalancedWebAppReadParserMockRecorder) ParseLoadBalancedWebService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseLoadBalancedWebService", reflect.TypeOf((*MockloadBalancedWebAppReadParser)(nil).ParseLoadBalancedWebService), arg0)
}
