// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/template/template.go

// Package mocks is a generated GoMock package.
package mocks

import (
	template "github.com/aws/amazon-ecs-cli-v2/internal/pkg/template"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockParser is a mock of Parser interface
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method
func (m *MockParser) Parse(path string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockParserMockRecorder) Parse(path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), varargs...)
}

// MockReadParser is a mock of ReadParser interface
type MockReadParser struct {
	ctrl     *gomock.Controller
	recorder *MockReadParserMockRecorder
}

// MockReadParserMockRecorder is the mock recorder for MockReadParser
type MockReadParserMockRecorder struct {
	mock *MockReadParser
}

// NewMockReadParser creates a new mock instance
func NewMockReadParser(ctrl *gomock.Controller) *MockReadParser {
	mock := &MockReadParser{ctrl: ctrl}
	mock.recorder = &MockReadParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadParser) EXPECT() *MockReadParserMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadParser) Read(path string) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReadParserMockRecorder) Read(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadParser)(nil).Read), path)
}

// Parse mocks base method
func (m *MockReadParser) Parse(path string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockReadParserMockRecorder) Parse(path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockReadParser)(nil).Parse), varargs...)
}

// MockAppTemplateReadParser is a mock of AppTemplateReadParser interface
type MockAppTemplateReadParser struct {
	ctrl     *gomock.Controller
	recorder *MockAppTemplateReadParserMockRecorder
}

// MockAppTemplateReadParserMockRecorder is the mock recorder for MockAppTemplateReadParser
type MockAppTemplateReadParserMockRecorder struct {
	mock *MockAppTemplateReadParser
}

// NewMockAppTemplateReadParser creates a new mock instance
func NewMockAppTemplateReadParser(ctrl *gomock.Controller) *MockAppTemplateReadParser {
	mock := &MockAppTemplateReadParser{ctrl: ctrl}
	mock.recorder = &MockAppTemplateReadParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppTemplateReadParser) EXPECT() *MockAppTemplateReadParserMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockAppTemplateReadParser) Read(path string) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockAppTemplateReadParserMockRecorder) Read(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAppTemplateReadParser)(nil).Read), path)
}

// Parse mocks base method
func (m *MockAppTemplateReadParser) Parse(path string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockAppTemplateReadParserMockRecorder) Parse(path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockAppTemplateReadParser)(nil).Parse), varargs...)
}

// ParseAppTemplate mocks base method
func (m *MockAppTemplateReadParser) ParseAppTemplate(name string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParseAppTemplate", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppTemplate indicates an expected call of ParseAppTemplate
func (mr *MockAppTemplateReadParserMockRecorder) ParseAppTemplate(name, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppTemplate", reflect.TypeOf((*MockAppTemplateReadParser)(nil).ParseAppTemplate), varargs...)
}
