// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/task/task.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ec2 "github.com/aws/copilot-cli/internal/pkg/aws/ec2"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	resourcegroups "github.com/aws/copilot-cli/internal/pkg/aws/resourcegroups"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVPCGetter is a mock of VPCGetter interface
type MockVPCGetter struct {
	ctrl     *gomock.Controller
	recorder *MockVPCGetterMockRecorder
}

// MockVPCGetterMockRecorder is the mock recorder for MockVPCGetter
type MockVPCGetterMockRecorder struct {
	mock *MockVPCGetter
}

// NewMockVPCGetter creates a new mock instance
func NewMockVPCGetter(ctrl *gomock.Controller) *MockVPCGetter {
	mock := &MockVPCGetter{ctrl: ctrl}
	mock.recorder = &MockVPCGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVPCGetter) EXPECT() *MockVPCGetterMockRecorder {
	return m.recorder
}

// SubnetIDs mocks base method
func (m *MockVPCGetter) SubnetIDs(filters ...ec2.Filter) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubnetIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetIDs indicates an expected call of SubnetIDs
func (mr *MockVPCGetterMockRecorder) SubnetIDs(filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetIDs", reflect.TypeOf((*MockVPCGetter)(nil).SubnetIDs), filters...)
}

// SecurityGroups mocks base method
func (m *MockVPCGetter) SecurityGroups(filters ...ec2.Filter) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecurityGroups", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecurityGroups indicates an expected call of SecurityGroups
func (mr *MockVPCGetterMockRecorder) SecurityGroups(filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityGroups", reflect.TypeOf((*MockVPCGetter)(nil).SecurityGroups), filters...)
}

// PublicSubnetIDs mocks base method
func (m *MockVPCGetter) PublicSubnetIDs(filters ...ec2.Filter) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublicSubnetIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicSubnetIDs indicates an expected call of PublicSubnetIDs
func (mr *MockVPCGetterMockRecorder) PublicSubnetIDs(filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicSubnetIDs", reflect.TypeOf((*MockVPCGetter)(nil).PublicSubnetIDs), filters...)
}

// MockResourceGetter is a mock of ResourceGetter interface
type MockResourceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceGetterMockRecorder
}

// MockResourceGetterMockRecorder is the mock recorder for MockResourceGetter
type MockResourceGetterMockRecorder struct {
	mock *MockResourceGetter
}

// NewMockResourceGetter creates a new mock instance
func NewMockResourceGetter(ctrl *gomock.Controller) *MockResourceGetter {
	mock := &MockResourceGetter{ctrl: ctrl}
	mock.recorder = &MockResourceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceGetter) EXPECT() *MockResourceGetterMockRecorder {
	return m.recorder
}

// GetResourcesByTags mocks base method
func (m *MockResourceGetter) GetResourcesByTags(resourceType string, tags map[string]string) ([]*resourcegroups.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesByTags", resourceType, tags)
	ret0, _ := ret[0].([]*resourcegroups.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesByTags indicates an expected call of GetResourcesByTags
func (mr *MockResourceGetterMockRecorder) GetResourcesByTags(resourceType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesByTags", reflect.TypeOf((*MockResourceGetter)(nil).GetResourcesByTags), resourceType, tags)
}

// MockDefaultClusterGetter is a mock of DefaultClusterGetter interface
type MockDefaultClusterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultClusterGetterMockRecorder
}

// MockDefaultClusterGetterMockRecorder is the mock recorder for MockDefaultClusterGetter
type MockDefaultClusterGetterMockRecorder struct {
	mock *MockDefaultClusterGetter
}

// NewMockDefaultClusterGetter creates a new mock instance
func NewMockDefaultClusterGetter(ctrl *gomock.Controller) *MockDefaultClusterGetter {
	mock := &MockDefaultClusterGetter{ctrl: ctrl}
	mock.recorder = &MockDefaultClusterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDefaultClusterGetter) EXPECT() *MockDefaultClusterGetterMockRecorder {
	return m.recorder
}

// DefaultCluster mocks base method
func (m *MockDefaultClusterGetter) DefaultCluster() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultCluster")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultCluster indicates an expected call of DefaultCluster
func (mr *MockDefaultClusterGetterMockRecorder) DefaultCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCluster", reflect.TypeOf((*MockDefaultClusterGetter)(nil).DefaultCluster))
}

// MockRunner is a mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// RunTask mocks base method
func (m *MockRunner) RunTask(input ecs.RunTaskInput) ([]*ecs.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTask", input)
	ret0, _ := ret[0].([]*ecs.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTask indicates an expected call of RunTask
func (mr *MockRunnerMockRecorder) RunTask(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockRunner)(nil).RunTask), input)
}
