// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/task/task.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ec2 "github.com/aws/copilot-cli/internal/pkg/aws/ec2"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	resourcegroups "github.com/aws/copilot-cli/internal/pkg/aws/resourcegroups"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockvpcGetter is a mock of vpcGetter interface
type MockvpcGetter struct {
	ctrl     *gomock.Controller
	recorder *MockvpcGetterMockRecorder
}

// MockvpcGetterMockRecorder is the mock recorder for MockvpcGetter
type MockvpcGetterMockRecorder struct {
	mock *MockvpcGetter
}

// NewMockvpcGetter creates a new mock instance
func NewMockvpcGetter(ctrl *gomock.Controller) *MockvpcGetter {
	mock := &MockvpcGetter{ctrl: ctrl}
	mock.recorder = &MockvpcGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockvpcGetter) EXPECT() *MockvpcGetterMockRecorder {
	return m.recorder
}

// GetSubnetIDs mocks base method
func (m *MockvpcGetter) GetSubnetIDs(filters ...ec2.Filter) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnetIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetIDs indicates an expected call of GetSubnetIDs
func (mr *MockvpcGetterMockRecorder) GetSubnetIDs(filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetIDs", reflect.TypeOf((*MockvpcGetter)(nil).GetSubnetIDs), filters...)
}

// GetSecurityGroups mocks base method
func (m *MockvpcGetter) GetSecurityGroups(filters ...ec2.Filter) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityGroups", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroups indicates an expected call of GetSecurityGroups
func (mr *MockvpcGetterMockRecorder) GetSecurityGroups(filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroups", reflect.TypeOf((*MockvpcGetter)(nil).GetSecurityGroups), filters...)
}

// MockresourceGetter is a mock of resourceGetter interface
type MockresourceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockresourceGetterMockRecorder
}

// MockresourceGetterMockRecorder is the mock recorder for MockresourceGetter
type MockresourceGetterMockRecorder struct {
	mock *MockresourceGetter
}

// NewMockresourceGetter creates a new mock instance
func NewMockresourceGetter(ctrl *gomock.Controller) *MockresourceGetter {
	mock := &MockresourceGetter{ctrl: ctrl}
	mock.recorder = &MockresourceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockresourceGetter) EXPECT() *MockresourceGetterMockRecorder {
	return m.recorder
}

// GetResourcesByTags mocks base method
func (m *MockresourceGetter) GetResourcesByTags(resourceType string, tags map[string]string) ([]*resourcegroups.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesByTags", resourceType, tags)
	ret0, _ := ret[0].([]*resourcegroups.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesByTags indicates an expected call of GetResourcesByTags
func (mr *MockresourceGetterMockRecorder) GetResourcesByTags(resourceType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesByTags", reflect.TypeOf((*MockresourceGetter)(nil).GetResourcesByTags), resourceType, tags)
}

// MockdefaultClusterGetter is a mock of defaultClusterGetter interface
type MockdefaultClusterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultClusterGetterMockRecorder
}

// MockdefaultClusterGetterMockRecorder is the mock recorder for MockdefaultClusterGetter
type MockdefaultClusterGetterMockRecorder struct {
	mock *MockdefaultClusterGetter
}

// NewMockdefaultClusterGetter creates a new mock instance
func NewMockdefaultClusterGetter(ctrl *gomock.Controller) *MockdefaultClusterGetter {
	mock := &MockdefaultClusterGetter{ctrl: ctrl}
	mock.recorder = &MockdefaultClusterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdefaultClusterGetter) EXPECT() *MockdefaultClusterGetterMockRecorder {
	return m.recorder
}

// DefaultCluster mocks base method
func (m *MockdefaultClusterGetter) DefaultCluster() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultCluster")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultCluster indicates an expected call of DefaultCluster
func (mr *MockdefaultClusterGetterMockRecorder) DefaultCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCluster", reflect.TypeOf((*MockdefaultClusterGetter)(nil).DefaultCluster))
}

// MocktaskRunner is a mock of taskRunner interface
type MocktaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MocktaskRunnerMockRecorder
}

// MocktaskRunnerMockRecorder is the mock recorder for MocktaskRunner
type MocktaskRunnerMockRecorder struct {
	mock *MocktaskRunner
}

// NewMocktaskRunner creates a new mock instance
func NewMocktaskRunner(ctrl *gomock.Controller) *MocktaskRunner {
	mock := &MocktaskRunner{ctrl: ctrl}
	mock.recorder = &MocktaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktaskRunner) EXPECT() *MocktaskRunnerMockRecorder {
	return m.recorder
}

// RunTask mocks base method
func (m *MocktaskRunner) RunTask(input ecs.RunTaskInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTask", input)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTask indicates an expected call of RunTask
func (mr *MocktaskRunnerMockRecorder) RunTask(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MocktaskRunner)(nil).RunTask), input)
}
