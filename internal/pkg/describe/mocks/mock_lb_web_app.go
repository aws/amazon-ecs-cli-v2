// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/lb_web_app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	archer "github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer"
	ecs "github.com/aws/amazon-ecs-cli-v2/internal/pkg/aws/ecs"
	cloudformation "github.com/aws/aws-sdk-go/service/cloudformation"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockstoreSvc is a mock of storeSvc interface
type MockstoreSvc struct {
	ctrl     *gomock.Controller
	recorder *MockstoreSvcMockRecorder
}

// MockstoreSvcMockRecorder is the mock recorder for MockstoreSvc
type MockstoreSvcMockRecorder struct {
	mock *MockstoreSvc
}

// NewMockstoreSvc creates a new mock instance
func NewMockstoreSvc(ctrl *gomock.Controller) *MockstoreSvc {
	mock := &MockstoreSvc{ctrl: ctrl}
	mock.recorder = &MockstoreSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstoreSvc) EXPECT() *MockstoreSvcMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method
func (m *MockstoreSvc) GetEnvironment(projectName, environmentName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockstoreSvcMockRecorder) GetEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockstoreSvc)(nil).GetEnvironment), projectName, environmentName)
}

// ListEnvironments mocks base method
func (m *MockstoreSvc) ListEnvironments(projectName string) ([]*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", projectName)
	ret0, _ := ret[0].([]*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockstoreSvcMockRecorder) ListEnvironments(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockstoreSvc)(nil).ListEnvironments), projectName)
}

// MockappDescriber is a mock of appDescriber interface
type MockappDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockappDescriberMockRecorder
}

// MockappDescriberMockRecorder is the mock recorder for MockappDescriber
type MockappDescriberMockRecorder struct {
	mock *MockappDescriber
}

// NewMockappDescriber creates a new mock instance
func NewMockappDescriber(ctrl *gomock.Controller) *MockappDescriber {
	mock := &MockappDescriber{ctrl: ctrl}
	mock.recorder = &MockappDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappDescriber) EXPECT() *MockappDescriberMockRecorder {
	return m.recorder
}

// Params mocks base method
func (m *MockappDescriber) Params() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params
func (mr *MockappDescriberMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockappDescriber)(nil).Params))
}

// EnvOutputs mocks base method
func (m *MockappDescriber) EnvOutputs() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvOutputs")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvOutputs indicates an expected call of EnvOutputs
func (mr *MockappDescriberMockRecorder) EnvOutputs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvOutputs", reflect.TypeOf((*MockappDescriber)(nil).EnvOutputs))
}

// EnvVars mocks base method
func (m *MockappDescriber) EnvVars() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvVars")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvVars indicates an expected call of EnvVars
func (mr *MockappDescriberMockRecorder) EnvVars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvVars", reflect.TypeOf((*MockappDescriber)(nil).EnvVars))
}

// GetServiceArn mocks base method
func (m *MockappDescriber) GetServiceArn() (*ecs.ServiceArn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceArn")
	ret0, _ := ret[0].(*ecs.ServiceArn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceArn indicates an expected call of GetServiceArn
func (mr *MockappDescriberMockRecorder) GetServiceArn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceArn", reflect.TypeOf((*MockappDescriber)(nil).GetServiceArn))
}

// AppStackResources mocks base method
func (m *MockappDescriber) AppStackResources() ([]*cloudformation.StackResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppStackResources")
	ret0, _ := ret[0].([]*cloudformation.StackResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppStackResources indicates an expected call of AppStackResources
func (mr *MockappDescriberMockRecorder) AppStackResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppStackResources", reflect.TypeOf((*MockappDescriber)(nil).AppStackResources))
}
