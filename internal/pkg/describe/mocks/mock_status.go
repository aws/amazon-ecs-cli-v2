// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/status.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudwatch "github.com/aws/copilot-cli/internal/pkg/aws/cloudwatch"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	resourcegroups "github.com/aws/copilot-cli/internal/pkg/aws/resourcegroups"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockalarmStatusGetter is a mock of alarmStatusGetter interface
type MockalarmStatusGetter struct {
	ctrl     *gomock.Controller
	recorder *MockalarmStatusGetterMockRecorder
}

// MockalarmStatusGetterMockRecorder is the mock recorder for MockalarmStatusGetter
type MockalarmStatusGetterMockRecorder struct {
	mock *MockalarmStatusGetter
}

// NewMockalarmStatusGetter creates a new mock instance
func NewMockalarmStatusGetter(ctrl *gomock.Controller) *MockalarmStatusGetter {
	mock := &MockalarmStatusGetter{ctrl: ctrl}
	mock.recorder = &MockalarmStatusGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockalarmStatusGetter) EXPECT() *MockalarmStatusGetterMockRecorder {
	return m.recorder
}

// AlarmsWithTags mocks base method
func (m *MockalarmStatusGetter) AlarmsWithTags(tags map[string]string) ([]cloudwatch.AlarmStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlarmsWithTags", tags)
	ret0, _ := ret[0].([]cloudwatch.AlarmStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlarmsWithTags indicates an expected call of AlarmsWithTags
func (mr *MockalarmStatusGetterMockRecorder) AlarmsWithTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlarmsWithTags", reflect.TypeOf((*MockalarmStatusGetter)(nil).AlarmsWithTags), tags)
}

// AlarmStatus mocks base method
func (m *MockalarmStatusGetter) AlarmStatus(alarms []string) ([]cloudwatch.AlarmStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlarmStatus", alarms)
	ret0, _ := ret[0].([]cloudwatch.AlarmStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlarmStatus indicates an expected call of AlarmStatus
func (mr *MockalarmStatusGetterMockRecorder) AlarmStatus(alarms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlarmStatus", reflect.TypeOf((*MockalarmStatusGetter)(nil).AlarmStatus), alarms)
}

// MockresourcesGetter is a mock of resourcesGetter interface
type MockresourcesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockresourcesGetterMockRecorder
}

// MockresourcesGetterMockRecorder is the mock recorder for MockresourcesGetter
type MockresourcesGetterMockRecorder struct {
	mock *MockresourcesGetter
}

// NewMockresourcesGetter creates a new mock instance
func NewMockresourcesGetter(ctrl *gomock.Controller) *MockresourcesGetter {
	mock := &MockresourcesGetter{ctrl: ctrl}
	mock.recorder = &MockresourcesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockresourcesGetter) EXPECT() *MockresourcesGetterMockRecorder {
	return m.recorder
}

// GetResourcesByTags mocks base method
func (m *MockresourcesGetter) GetResourcesByTags(resourceType string, tags map[string]string) ([]*resourcegroups.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesByTags", resourceType, tags)
	ret0, _ := ret[0].([]*resourcegroups.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesByTags indicates an expected call of GetResourcesByTags
func (mr *MockresourcesGetterMockRecorder) GetResourcesByTags(resourceType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesByTags", reflect.TypeOf((*MockresourcesGetter)(nil).GetResourcesByTags), resourceType, tags)
}

// MockecsServiceGetter is a mock of ecsServiceGetter interface
type MockecsServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockecsServiceGetterMockRecorder
}

// MockecsServiceGetterMockRecorder is the mock recorder for MockecsServiceGetter
type MockecsServiceGetterMockRecorder struct {
	mock *MockecsServiceGetter
}

// NewMockecsServiceGetter creates a new mock instance
func NewMockecsServiceGetter(ctrl *gomock.Controller) *MockecsServiceGetter {
	mock := &MockecsServiceGetter{ctrl: ctrl}
	mock.recorder = &MockecsServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockecsServiceGetter) EXPECT() *MockecsServiceGetterMockRecorder {
	return m.recorder
}

// ServiceTasks mocks base method
func (m *MockecsServiceGetter) ServiceTasks(clusterName, serviceName string) ([]*ecs.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceTasks", clusterName, serviceName)
	ret0, _ := ret[0].([]*ecs.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceTasks indicates an expected call of ServiceTasks
func (mr *MockecsServiceGetterMockRecorder) ServiceTasks(clusterName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceTasks", reflect.TypeOf((*MockecsServiceGetter)(nil).ServiceTasks), clusterName, serviceName)
}

// Service mocks base method
func (m *MockecsServiceGetter) Service(clusterName, serviceName string) (*ecs.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", clusterName, serviceName)
	ret0, _ := ret[0].(*ecs.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service
func (mr *MockecsServiceGetterMockRecorder) Service(clusterName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockecsServiceGetter)(nil).Service), clusterName, serviceName)
}

// MockautoscalingAlarmNamesGetter is a mock of autoscalingAlarmNamesGetter interface
type MockautoscalingAlarmNamesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockautoscalingAlarmNamesGetterMockRecorder
}

// MockautoscalingAlarmNamesGetterMockRecorder is the mock recorder for MockautoscalingAlarmNamesGetter
type MockautoscalingAlarmNamesGetterMockRecorder struct {
	mock *MockautoscalingAlarmNamesGetter
}

// NewMockautoscalingAlarmNamesGetter creates a new mock instance
func NewMockautoscalingAlarmNamesGetter(ctrl *gomock.Controller) *MockautoscalingAlarmNamesGetter {
	mock := &MockautoscalingAlarmNamesGetter{ctrl: ctrl}
	mock.recorder = &MockautoscalingAlarmNamesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockautoscalingAlarmNamesGetter) EXPECT() *MockautoscalingAlarmNamesGetterMockRecorder {
	return m.recorder
}

// ECSServiceAlarmNames mocks base method
func (m *MockautoscalingAlarmNamesGetter) ECSServiceAlarmNames(cluster, service string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ECSServiceAlarmNames", cluster, service)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ECSServiceAlarmNames indicates an expected call of ECSServiceAlarmNames
func (mr *MockautoscalingAlarmNamesGetterMockRecorder) ECSServiceAlarmNames(cluster, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ECSServiceAlarmNames", reflect.TypeOf((*MockautoscalingAlarmNamesGetter)(nil).ECSServiceAlarmNames), cluster, service)
}
