// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ecs "github.com/aws/amazon-ecs-cli-v2/internal/pkg/aws/ecs"
	cloudformation "github.com/aws/aws-sdk-go/service/cloudformation"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockstackDescriber is a mock of stackDescriber interface
type MockstackDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockstackDescriberMockRecorder
}

// MockstackDescriberMockRecorder is the mock recorder for MockstackDescriber
type MockstackDescriberMockRecorder struct {
	mock *MockstackDescriber
}

// NewMockstackDescriber creates a new mock instance
func NewMockstackDescriber(ctrl *gomock.Controller) *MockstackDescriber {
	mock := &MockstackDescriber{ctrl: ctrl}
	mock.recorder = &MockstackDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstackDescriber) EXPECT() *MockstackDescriberMockRecorder {
	return m.recorder
}

// Stack mocks base method
func (m *MockstackDescriber) Stack(stackName string) (*cloudformation.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stack", stackName)
	ret0, _ := ret[0].(*cloudformation.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stack indicates an expected call of Stack
func (mr *MockstackDescriberMockRecorder) Stack(stackName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stack", reflect.TypeOf((*MockstackDescriber)(nil).Stack), stackName)
}

// StackResources mocks base method
func (m *MockstackDescriber) StackResources(stackName string) ([]*cloudformation.StackResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackResources", stackName)
	ret0, _ := ret[0].([]*cloudformation.StackResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StackResources indicates an expected call of StackResources
func (mr *MockstackDescriberMockRecorder) StackResources(stackName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackResources", reflect.TypeOf((*MockstackDescriber)(nil).StackResources), stackName)
}

// MockecsService is a mock of ecsService interface
type MockecsService struct {
	ctrl     *gomock.Controller
	recorder *MockecsServiceMockRecorder
}

// MockecsServiceMockRecorder is the mock recorder for MockecsService
type MockecsServiceMockRecorder struct {
	mock *MockecsService
}

// NewMockecsService creates a new mock instance
func NewMockecsService(ctrl *gomock.Controller) *MockecsService {
	mock := &MockecsService{ctrl: ctrl}
	mock.recorder = &MockecsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockecsService) EXPECT() *MockecsServiceMockRecorder {
	return m.recorder
}

// TaskDefinition mocks base method
func (m *MockecsService) TaskDefinition(taskDefName string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", taskDefName)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition
func (mr *MockecsServiceMockRecorder) TaskDefinition(taskDefName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockecsService)(nil).TaskDefinition), taskDefName)
}
