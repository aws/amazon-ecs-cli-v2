// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudformation "github.com/aws/aws-sdk-go/service/cloudformation"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	config "github.com/aws/copilot-cli/internal/pkg/config"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockstackAndResourcesDescriber is a mock of stackAndResourcesDescriber interface
type MockstackAndResourcesDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockstackAndResourcesDescriberMockRecorder
}

// MockstackAndResourcesDescriberMockRecorder is the mock recorder for MockstackAndResourcesDescriber
type MockstackAndResourcesDescriberMockRecorder struct {
	mock *MockstackAndResourcesDescriber
}

// NewMockstackAndResourcesDescriber creates a new mock instance
func NewMockstackAndResourcesDescriber(ctrl *gomock.Controller) *MockstackAndResourcesDescriber {
	mock := &MockstackAndResourcesDescriber{ctrl: ctrl}
	mock.recorder = &MockstackAndResourcesDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstackAndResourcesDescriber) EXPECT() *MockstackAndResourcesDescriberMockRecorder {
	return m.recorder
}

// Stack mocks base method
func (m *MockstackAndResourcesDescriber) Stack(stackName string) (*cloudformation.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stack", stackName)
	ret0, _ := ret[0].(*cloudformation.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stack indicates an expected call of Stack
func (mr *MockstackAndResourcesDescriberMockRecorder) Stack(stackName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stack", reflect.TypeOf((*MockstackAndResourcesDescriber)(nil).Stack), stackName)
}

// StackResources mocks base method
func (m *MockstackAndResourcesDescriber) StackResources(stackName string) ([]*cloudformation.StackResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackResources", stackName)
	ret0, _ := ret[0].([]*cloudformation.StackResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StackResources indicates an expected call of StackResources
func (mr *MockstackAndResourcesDescriberMockRecorder) StackResources(stackName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackResources", reflect.TypeOf((*MockstackAndResourcesDescriber)(nil).StackResources), stackName)
}

// MockecsClient is a mock of ecsClient interface
type MockecsClient struct {
	ctrl     *gomock.Controller
	recorder *MockecsClientMockRecorder
}

// MockecsClientMockRecorder is the mock recorder for MockecsClient
type MockecsClientMockRecorder struct {
	mock *MockecsClient
}

// NewMockecsClient creates a new mock instance
func NewMockecsClient(ctrl *gomock.Controller) *MockecsClient {
	mock := &MockecsClient{ctrl: ctrl}
	mock.recorder = &MockecsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockecsClient) EXPECT() *MockecsClientMockRecorder {
	return m.recorder
}

// TaskDefinition mocks base method
func (m *MockecsClient) TaskDefinition(taskDefName string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", taskDefName)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition
func (mr *MockecsClientMockRecorder) TaskDefinition(taskDefName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockecsClient)(nil).TaskDefinition), taskDefName)
}

// MockconfigStoreSvc is a mock of configStoreSvc interface
type MockconfigStoreSvc struct {
	ctrl     *gomock.Controller
	recorder *MockconfigStoreSvcMockRecorder
}

// MockconfigStoreSvcMockRecorder is the mock recorder for MockconfigStoreSvc
type MockconfigStoreSvcMockRecorder struct {
	mock *MockconfigStoreSvc
}

// NewMockconfigStoreSvc creates a new mock instance
func NewMockconfigStoreSvc(ctrl *gomock.Controller) *MockconfigStoreSvc {
	mock := &MockconfigStoreSvc{ctrl: ctrl}
	mock.recorder = &MockconfigStoreSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockconfigStoreSvc) EXPECT() *MockconfigStoreSvcMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method
func (m *MockconfigStoreSvc) GetEnvironment(appName, environmentName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, environmentName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockconfigStoreSvcMockRecorder) GetEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockconfigStoreSvc)(nil).GetEnvironment), appName, environmentName)
}

// ListEnvironments mocks base method
func (m *MockconfigStoreSvc) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockconfigStoreSvcMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockconfigStoreSvc)(nil).ListEnvironments), appName)
}

// MockdeployStoreSvc is a mock of deployStoreSvc interface
type MockdeployStoreSvc struct {
	ctrl     *gomock.Controller
	recorder *MockdeployStoreSvcMockRecorder
}

// MockdeployStoreSvcMockRecorder is the mock recorder for MockdeployStoreSvc
type MockdeployStoreSvcMockRecorder struct {
	mock *MockdeployStoreSvc
}

// NewMockdeployStoreSvc creates a new mock instance
func NewMockdeployStoreSvc(ctrl *gomock.Controller) *MockdeployStoreSvc {
	mock := &MockdeployStoreSvc{ctrl: ctrl}
	mock.recorder = &MockdeployStoreSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdeployStoreSvc) EXPECT() *MockdeployStoreSvcMockRecorder {
	return m.recorder
}

// ListEnvironmentsDeployedTo mocks base method
func (m *MockdeployStoreSvc) ListEnvironmentsDeployedTo(appName, svcName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsDeployedTo", appName, svcName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsDeployedTo indicates an expected call of ListEnvironmentsDeployedTo
func (mr *MockdeployStoreSvcMockRecorder) ListEnvironmentsDeployedTo(appName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsDeployedTo", reflect.TypeOf((*MockdeployStoreSvc)(nil).ListEnvironmentsDeployedTo), appName, svcName)
}
