// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/webapp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	archer "github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer"
	session "github.com/aws/aws-sdk-go/aws/session"
	cloudformation "github.com/aws/aws-sdk-go/service/cloudformation"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockstackDescriber is a mock of stackDescriber interface
type MockstackDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockstackDescriberMockRecorder
}

// MockstackDescriberMockRecorder is the mock recorder for MockstackDescriber
type MockstackDescriberMockRecorder struct {
	mock *MockstackDescriber
}

// NewMockstackDescriber creates a new mock instance
func NewMockstackDescriber(ctrl *gomock.Controller) *MockstackDescriber {
	mock := &MockstackDescriber{ctrl: ctrl}
	mock.recorder = &MockstackDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstackDescriber) EXPECT() *MockstackDescriberMockRecorder {
	return m.recorder
}

// DescribeStacks mocks base method
func (m *MockstackDescriber) DescribeStacks(input *cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStacks", input)
	ret0, _ := ret[0].(*cloudformation.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacks indicates an expected call of DescribeStacks
func (mr *MockstackDescriberMockRecorder) DescribeStacks(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacks", reflect.TypeOf((*MockstackDescriber)(nil).DescribeStacks), input)
}

// MocksessionFromRoleProvider is a mock of sessionFromRoleProvider interface
type MocksessionFromRoleProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionFromRoleProviderMockRecorder
}

// MocksessionFromRoleProviderMockRecorder is the mock recorder for MocksessionFromRoleProvider
type MocksessionFromRoleProviderMockRecorder struct {
	mock *MocksessionFromRoleProvider
}

// NewMocksessionFromRoleProvider creates a new mock instance
func NewMocksessionFromRoleProvider(ctrl *gomock.Controller) *MocksessionFromRoleProvider {
	mock := &MocksessionFromRoleProvider{ctrl: ctrl}
	mock.recorder = &MocksessionFromRoleProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionFromRoleProvider) EXPECT() *MocksessionFromRoleProviderMockRecorder {
	return m.recorder
}

// FromRole mocks base method
func (m *MocksessionFromRoleProvider) FromRole(roleARN, region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromRole", roleARN, region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromRole indicates an expected call of FromRole
func (mr *MocksessionFromRoleProviderMockRecorder) FromRole(roleARN, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromRole", reflect.TypeOf((*MocksessionFromRoleProvider)(nil).FromRole), roleARN, region)
}

// MockenvGetter is a mock of envGetter interface
type MockenvGetter struct {
	ctrl     *gomock.Controller
	recorder *MockenvGetterMockRecorder
}

// MockenvGetterMockRecorder is the mock recorder for MockenvGetter
type MockenvGetterMockRecorder struct {
	mock *MockenvGetter
}

// NewMockenvGetter creates a new mock instance
func NewMockenvGetter(ctrl *gomock.Controller) *MockenvGetter {
	mock := &MockenvGetter{ctrl: ctrl}
	mock.recorder = &MockenvGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvGetter) EXPECT() *MockenvGetterMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method
func (m *MockenvGetter) GetEnvironment(projectName, environmentName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockenvGetterMockRecorder) GetEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockenvGetter)(nil).GetEnvironment), projectName, environmentName)
}
