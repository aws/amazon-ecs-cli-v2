// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/lb_web_app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	archer "github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer"
	stack "github.com/aws/amazon-ecs-cli-v2/internal/pkg/describe/stack"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockstoreSvc is a mock of storeSvc interface
type MockstoreSvc struct {
	ctrl     *gomock.Controller
	recorder *MockstoreSvcMockRecorder
}

// MockstoreSvcMockRecorder is the mock recorder for MockstoreSvc
type MockstoreSvcMockRecorder struct {
	mock *MockstoreSvc
}

// NewMockstoreSvc creates a new mock instance
func NewMockstoreSvc(ctrl *gomock.Controller) *MockstoreSvc {
	mock := &MockstoreSvc{ctrl: ctrl}
	mock.recorder = &MockstoreSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstoreSvc) EXPECT() *MockstoreSvcMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method
func (m *MockstoreSvc) GetEnvironment(projectName, environmentName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockstoreSvcMockRecorder) GetEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockstoreSvc)(nil).GetEnvironment), projectName, environmentName)
}

// ListEnvironments mocks base method
func (m *MockstoreSvc) ListEnvironments(projectName string) ([]*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", projectName)
	ret0, _ := ret[0].([]*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockstoreSvcMockRecorder) ListEnvironments(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockstoreSvc)(nil).ListEnvironments), projectName)
}

// MockstackDescriber is a mock of stackDescriber interface
type MockstackDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockstackDescriberMockRecorder
}

// MockstackDescriberMockRecorder is the mock recorder for MockstackDescriber
type MockstackDescriberMockRecorder struct {
	mock *MockstackDescriber
}

// NewMockstackDescriber creates a new mock instance
func NewMockstackDescriber(ctrl *gomock.Controller) *MockstackDescriber {
	mock := &MockstackDescriber{ctrl: ctrl}
	mock.recorder = &MockstackDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstackDescriber) EXPECT() *MockstackDescriberMockRecorder {
	return m.recorder
}

// EnvVars mocks base method
func (m *MockstackDescriber) EnvVars(env *archer.Environment, appName string) ([]*stack.EnvVars, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvVars", env, appName)
	ret0, _ := ret[0].([]*stack.EnvVars)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvVars indicates an expected call of EnvVars
func (mr *MockstackDescriberMockRecorder) EnvVars(env, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvVars", reflect.TypeOf((*MockstackDescriber)(nil).EnvVars), env, appName)
}

// StackResources mocks base method
func (m *MockstackDescriber) StackResources(envName, appName string) ([]*stack.CfnResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackResources", envName, appName)
	ret0, _ := ret[0].([]*stack.CfnResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StackResources indicates an expected call of StackResources
func (mr *MockstackDescriberMockRecorder) StackResources(envName, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackResources", reflect.TypeOf((*MockstackDescriber)(nil).StackResources), envName, appName)
}

// EnvOutputs mocks base method
func (m *MockstackDescriber) EnvOutputs(env *archer.Environment) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvOutputs", env)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvOutputs indicates an expected call of EnvOutputs
func (mr *MockstackDescriberMockRecorder) EnvOutputs(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvOutputs", reflect.TypeOf((*MockstackDescriber)(nil).EnvOutputs), env)
}

// AppParams mocks base method
func (m *MockstackDescriber) AppParams(env *archer.Environment, appName string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppParams", env, appName)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppParams indicates an expected call of AppParams
func (mr *MockstackDescriberMockRecorder) AppParams(env, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppParams", reflect.TypeOf((*MockstackDescriber)(nil).AppParams), env, appName)
}
