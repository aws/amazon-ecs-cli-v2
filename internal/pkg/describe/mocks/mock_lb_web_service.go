// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/describe/lb_web_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cloudformation "github.com/aws/aws-sdk-go/service/cloudformation"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	config "github.com/aws/copilot-cli/internal/pkg/config"
	gomock "github.com/golang/mock/gomock"
)

// MockstoreSvc is a mock of storeSvc interface
type MockstoreSvc struct {
	ctrl     *gomock.Controller
	recorder *MockstoreSvcMockRecorder
}

// MockstoreSvcMockRecorder is the mock recorder for MockstoreSvc
type MockstoreSvcMockRecorder struct {
	mock *MockstoreSvc
}

// NewMockstoreSvc creates a new mock instance
func NewMockstoreSvc(ctrl *gomock.Controller) *MockstoreSvc {
	mock := &MockstoreSvc{ctrl: ctrl}
	mock.recorder = &MockstoreSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstoreSvc) EXPECT() *MockstoreSvcMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method
func (m *MockstoreSvc) GetEnvironment(appName, environmentName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, environmentName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockstoreSvcMockRecorder) GetEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockstoreSvc)(nil).GetEnvironment), appName, environmentName)
}

// ListEnvironments mocks base method
func (m *MockstoreSvc) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockstoreSvcMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockstoreSvc)(nil).ListEnvironments), appName)
}

// MocksvcDescriber is a mock of svcDescriber interface
type MocksvcDescriber struct {
	ctrl     *gomock.Controller
	recorder *MocksvcDescriberMockRecorder
}

// MocksvcDescriberMockRecorder is the mock recorder for MocksvcDescriber
type MocksvcDescriberMockRecorder struct {
	mock *MocksvcDescriber
}

// NewMocksvcDescriber creates a new mock instance
func NewMocksvcDescriber(ctrl *gomock.Controller) *MocksvcDescriber {
	mock := &MocksvcDescriber{ctrl: ctrl}
	mock.recorder = &MocksvcDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksvcDescriber) EXPECT() *MocksvcDescriberMockRecorder {
	return m.recorder
}

// Params mocks base method
func (m *MocksvcDescriber) Params() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params
func (mr *MocksvcDescriberMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MocksvcDescriber)(nil).Params))
}

// EnvOutputs mocks base method
func (m *MocksvcDescriber) EnvOutputs() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvOutputs")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvOutputs indicates an expected call of EnvOutputs
func (mr *MocksvcDescriberMockRecorder) EnvOutputs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvOutputs", reflect.TypeOf((*MocksvcDescriber)(nil).EnvOutputs))
}

// EnvVars mocks base method
func (m *MocksvcDescriber) EnvVars() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvVars")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvVars indicates an expected call of EnvVars
func (mr *MocksvcDescriberMockRecorder) EnvVars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvVars", reflect.TypeOf((*MocksvcDescriber)(nil).EnvVars))
}

// GetServiceArn mocks base method
func (m *MocksvcDescriber) GetServiceArn() (*ecs.ServiceArn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceArn")
	ret0, _ := ret[0].(*ecs.ServiceArn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceArn indicates an expected call of GetServiceArn
func (mr *MocksvcDescriberMockRecorder) GetServiceArn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceArn", reflect.TypeOf((*MocksvcDescriber)(nil).GetServiceArn))
}

// ServiceStackResources mocks base method
func (m *MocksvcDescriber) ServiceStackResources() ([]*cloudformation.StackResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStackResources")
	ret0, _ := ret[0].([]*cloudformation.StackResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStackResources indicates an expected call of ServiceStackResources
func (mr *MocksvcDescriberMockRecorder) ServiceStackResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStackResources", reflect.TypeOf((*MocksvcDescriber)(nil).ServiceStackResources))
}
