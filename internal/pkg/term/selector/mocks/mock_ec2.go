// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/term/selector/ec2.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ec2 "github.com/aws/copilot-cli/internal/pkg/aws/ec2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVPCSubnetLister is a mock of VPCSubnetLister interface
type MockVPCSubnetLister struct {
	ctrl     *gomock.Controller
	recorder *MockVPCSubnetListerMockRecorder
}

// MockVPCSubnetListerMockRecorder is the mock recorder for MockVPCSubnetLister
type MockVPCSubnetListerMockRecorder struct {
	mock *MockVPCSubnetLister
}

// NewMockVPCSubnetLister creates a new mock instance
func NewMockVPCSubnetLister(ctrl *gomock.Controller) *MockVPCSubnetLister {
	mock := &MockVPCSubnetLister{ctrl: ctrl}
	mock.recorder = &MockVPCSubnetListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVPCSubnetLister) EXPECT() *MockVPCSubnetListerMockRecorder {
	return m.recorder
}

// ListVPCLabels mocks base method
func (m *MockVPCSubnetLister) ListVPCLabels() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCLabels")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCLabels indicates an expected call of ListVPCLabels
func (mr *MockVPCSubnetListerMockRecorder) ListVPCLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCLabels", reflect.TypeOf((*MockVPCSubnetLister)(nil).ListVPCLabels))
}

// ListVPCSubnets mocks base method
func (m *MockVPCSubnetLister) ListVPCSubnets(vpcID string, opts ...ec2.ListVPCSubnetsOpts) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{vpcID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVPCSubnets", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCSubnets indicates an expected call of ListVPCSubnets
func (mr *MockVPCSubnetListerMockRecorder) ListVPCSubnets(vpcID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{vpcID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCSubnets", reflect.TypeOf((*MockVPCSubnetLister)(nil).ListVPCSubnets), varargs...)
}
