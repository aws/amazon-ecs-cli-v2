// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/aws/iface/iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ecr "github.com/aws/aws-sdk-go/service/ecr"
	resourcegroupstaggingapi "github.com/aws/aws-sdk-go/service/resourcegroupstaggingapi"
	route53 "github.com/aws/aws-sdk-go/service/route53"
	sts "github.com/aws/aws-sdk-go/service/sts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoute53API is a mock of Route53API interface
type MockRoute53API struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53APIMockRecorder
}

// MockRoute53APIMockRecorder is the mock recorder for MockRoute53API
type MockRoute53APIMockRecorder struct {
	mock *MockRoute53API
}

// NewMockRoute53API creates a new mock instance
func NewMockRoute53API(ctrl *gomock.Controller) *MockRoute53API {
	mock := &MockRoute53API{ctrl: ctrl}
	mock.recorder = &MockRoute53APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoute53API) EXPECT() *MockRoute53APIMockRecorder {
	return m.recorder
}

// ListHostedZonesByName mocks base method
func (m *MockRoute53API) ListHostedZonesByName(in *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostedZonesByName", in)
	ret0, _ := ret[0].(*route53.ListHostedZonesByNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZonesByName indicates an expected call of ListHostedZonesByName
func (mr *MockRoute53APIMockRecorder) ListHostedZonesByName(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZonesByName", reflect.TypeOf((*MockRoute53API)(nil).ListHostedZonesByName), in)
}

// MockECRAPI is a mock of ECRAPI interface
type MockECRAPI struct {
	ctrl     *gomock.Controller
	recorder *MockECRAPIMockRecorder
}

// MockECRAPIMockRecorder is the mock recorder for MockECRAPI
type MockECRAPIMockRecorder struct {
	mock *MockECRAPI
}

// NewMockECRAPI creates a new mock instance
func NewMockECRAPI(ctrl *gomock.Controller) *MockECRAPI {
	mock := &MockECRAPI{ctrl: ctrl}
	mock.recorder = &MockECRAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockECRAPI) EXPECT() *MockECRAPIMockRecorder {
	return m.recorder
}

// GetAuthorizationToken mocks base method
func (m *MockECRAPI) GetAuthorizationToken(arg0 *ecr.GetAuthorizationTokenInput) (*ecr.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationToken", arg0)
	ret0, _ := ret[0].(*ecr.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken
func (mr *MockECRAPIMockRecorder) GetAuthorizationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECRAPI)(nil).GetAuthorizationToken), arg0)
}

// DescribeRepositories mocks base method
func (m *MockECRAPI) DescribeRepositories(arg0 *ecr.DescribeRepositoriesInput) (*ecr.DescribeRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRepositories", arg0)
	ret0, _ := ret[0].(*ecr.DescribeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositories indicates an expected call of DescribeRepositories
func (mr *MockECRAPIMockRecorder) DescribeRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositories", reflect.TypeOf((*MockECRAPI)(nil).DescribeRepositories), arg0)
}

// DescribeImages mocks base method
func (m *MockECRAPI) DescribeImages(arg0 *ecr.DescribeImagesInput) (*ecr.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImages", arg0)
	ret0, _ := ret[0].(*ecr.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImages indicates an expected call of DescribeImages
func (mr *MockECRAPIMockRecorder) DescribeImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImages", reflect.TypeOf((*MockECRAPI)(nil).DescribeImages), arg0)
}

// BatchDeleteImage mocks base method
func (m *MockECRAPI) BatchDeleteImage(arg0 *ecr.BatchDeleteImageInput) (*ecr.BatchDeleteImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteImage", arg0)
	ret0, _ := ret[0].(*ecr.BatchDeleteImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteImage indicates an expected call of BatchDeleteImage
func (mr *MockECRAPIMockRecorder) BatchDeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteImage", reflect.TypeOf((*MockECRAPI)(nil).BatchDeleteImage), arg0)
}

// MockSTSAPI is a mock of STSAPI interface
type MockSTSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSTSAPIMockRecorder
}

// MockSTSAPIMockRecorder is the mock recorder for MockSTSAPI
type MockSTSAPIMockRecorder struct {
	mock *MockSTSAPI
}

// NewMockSTSAPI creates a new mock instance
func NewMockSTSAPI(ctrl *gomock.Controller) *MockSTSAPI {
	mock := &MockSTSAPI{ctrl: ctrl}
	mock.recorder = &MockSTSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSTSAPI) EXPECT() *MockSTSAPIMockRecorder {
	return m.recorder
}

// GetCallerIdentity mocks base method
func (m *MockSTSAPI) GetCallerIdentity(arg0 *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallerIdentity", arg0)
	ret0, _ := ret[0].(*sts.GetCallerIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallerIdentity indicates an expected call of GetCallerIdentity
func (mr *MockSTSAPIMockRecorder) GetCallerIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallerIdentity", reflect.TypeOf((*MockSTSAPI)(nil).GetCallerIdentity), arg0)
}

// MockResourceGroupsTaggingAPI is a mock of ResourceGroupsTaggingAPI interface
type MockResourceGroupsTaggingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockResourceGroupsTaggingAPIMockRecorder
}

// MockResourceGroupsTaggingAPIMockRecorder is the mock recorder for MockResourceGroupsTaggingAPI
type MockResourceGroupsTaggingAPIMockRecorder struct {
	mock *MockResourceGroupsTaggingAPI
}

// NewMockResourceGroupsTaggingAPI creates a new mock instance
func NewMockResourceGroupsTaggingAPI(ctrl *gomock.Controller) *MockResourceGroupsTaggingAPI {
	mock := &MockResourceGroupsTaggingAPI{ctrl: ctrl}
	mock.recorder = &MockResourceGroupsTaggingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceGroupsTaggingAPI) EXPECT() *MockResourceGroupsTaggingAPIMockRecorder {
	return m.recorder
}

// GetResources mocks base method
func (m *MockResourceGroupsTaggingAPI) GetResources(arg0 *resourcegroupstaggingapi.GetResourcesInput) (*resourcegroupstaggingapi.GetResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", arg0)
	ret0, _ := ret[0].(*resourcegroupstaggingapi.GetResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources
func (mr *MockResourceGroupsTaggingAPIMockRecorder) GetResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockResourceGroupsTaggingAPI)(nil).GetResources), arg0)
}
